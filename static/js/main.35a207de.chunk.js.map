{"version":3,"sources":["components/Calculator/Buttons/Button/Button.module.css","components/Calculator/Calculator.js","components/Calculator/Display/Display.js","components/Calculator/Display/Display.module.css","components/Calculator/Buttons/Buttons.module.css","components/Calculator/Calculator.module.css","components/Calculator/Buttons/Button/Button.js","components/Calculator/Buttons/Buttons.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Calculator","state","valueOnScreen","calculateString","onClickHandler","input","replace","result","eval","toFixed","String","setState","className","classes","style","textAlign","fontStyle","fontSize","color","value","this","clicked","Component","display","props","Display","button","cssProps","ColorIt","erase","push","operation","get","join","onClick","click","buttons","ButtonPanel","Button","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35a207de.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"erase\":\"Button_erase__3R6Le\",\"get\":\"Button_get__7bJFl\",\"operation\":\"Button_operation__34YFl\"};","import React, { Component } from \"react\";\nimport Display from \"./Display/Display\";\nimport Buttons from \"./Buttons/Buttons\";\nimport classes from \"./Calculator.module.css\";\n\nclass Calculator extends Component {\n  state = {\n    valueOnScreen: 0\n  };\n\n  calculateString = \"\";\n\n  onClickHandler = (input) => {\n    if (input === \"mod\") {\n      input = \"%\";\n    }\n    if (input === \"=\") {\n      this.calculateString = this.calculateString.replace(/^(?!0$)0+/, \"\");\n      let result = eval(this.calculateString);\n\n      if (result % 1 !== 0) {\n        result = result.toFixed(2);\n      }\n      this.calculateString = String(result);\n      this.setState({ valueOnScreen: result });\n    } else if (input === \"AC\") {\n      this.calculateString = \"\";\n      this.setState({ valueOnScreen: 0 });\n    } else {\n      this.calculateString = this.calculateString + input;\n      this.setState({ valueOnScreen: String(this.calculateString) });\n    }\n  };\n\n  render() {\n    return (\n      <div className={classes.Calculator}>\n        <h1\n          style={{\n            textAlign: \"center\",\n            fontStyle: \"italic\",\n            fontSize: \"1.5em\",\n            color: \"white\"\n          }}\n        >\n          Simple Calculator\n        </h1>\n        <Display value={this.state.valueOnScreen} />\n        <Buttons clicked={this.onClickHandler} />\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from \"react\";\nimport classes from \"./Display.module.css\";\n\nconst display = (props) => {\n  return (\n    <div>\n      <h3 className={classes.Display}>{props.value}</h3>\n    </div>\n  );\n};\n\nexport default display;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Display\":\"Display_Display__ydvBr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonPanel\":\"Buttons_ButtonPanel__3BmDY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Calculator\":\"Calculator_Calculator__3F3wg\"};","import React, { Fragment } from \"react\";\nimport classes from \"./Button.module.css\";\n\nconst button = (props) => {\n  const cssProps = [classes.ColorIt];\n  if (props.erase) {\n    cssProps.push(classes.erase);\n  }\n  if (props.operation) {\n    cssProps.push(classes.operation);\n  }\n\n  if (props.get) {\n    cssProps.push(classes.get);\n  }\n  return (\n    <Fragment>\n      <button\n        className={cssProps.join(\"\")}\n        onClick={() => props.click(props.value)}\n      >\n        {props.value}\n      </button>\n    </Fragment>\n  );\n};\n\nexport default button;\n","import React, { Fragment } from \"react\";\nimport Button from \"./Button/Button\";\nimport classes from \"./Buttons.module.css\";\n\nconst buttons = (props) => {\n  return (\n    <Fragment>\n      <div className={classes.ButtonPanel}>\n        <div>\n          <Button value=\"0\" click={props.clicked} />\n          <Button value=\"1\" click={props.clicked} />\n          <Button value=\"2\" click={props.clicked} />\n        </div>\n\n        <div>\n          <Button value=\"3\" click={props.clicked} />\n          <Button value=\"4\" click={props.clicked} />\n          <Button value=\"5\" click={props.clicked} />\n        </div>\n\n        <div>\n          <Button value=\"6\" click={props.clicked} />\n          <Button value=\"7\" click={props.clicked} />\n          <Button value=\"8\" click={props.clicked} />\n        </div>\n        <div>\n          <Button value=\"9\" click={props.clicked} />\n          <Button value=\".\" click={props.clicked} />\n          <Button value=\"mod\" click={props.clicked} operation />\n        </div>\n\n        <div>\n          <Button value=\"+\" click={props.clicked} operation />\n          <Button value=\"-\" click={props.clicked} operation />\n          <Button value=\"*\" click={props.clicked} operation />\n        </div>\n\n        <div>\n          <Button value=\"/\" click={props.clicked} operation />\n          <Button value=\"=\" click={props.clicked} get />\n          <Button value=\"AC\" click={props.clicked} erase />\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default buttons;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Calculator from \"./components/Calculator/Calculator\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}